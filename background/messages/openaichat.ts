import type { PlasmoMessaging } from "@plasmohq/messaging"
import { OpenAI} from "openai";
import { Pinecone } from '@pinecone-database/pinecone';
import { v4 as uuidv4 } from 'uuid';
import { time } from "console";

const client = new OpenAI({
    apiKey: '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',
});

const url = 'https://vnextpm-0030ce1.svc.gcp-starter.pinecone.io/';

const query = "user name, password, first name, last name, address, city, state, zip code, profile name, description, bio"

const queryVector = [-0.008587956,0.016590226,-0.013470805,-0.043086205,-0.01540612,0.03911372,-0.03720387,-0.034453686,-0.009383728,-0.045938246,0.008925363,-0.007715792,-0.006601713,0.0096829375,0.012585908,-0.019302212,0.010777918,-0.017303236,0.007887678,-0.030939562,0.0049465103,0.007862214,-0.0131015675,0.011828335,-0.021695891,0.0016472453,0.008804406,-0.016475635,0.0052011567,-0.014616715,-0.0011085086,-0.013572664,-0.01557164,-0.028393097,-0.028749602,0.011987489,-0.0040679793,-0.022930928,0.010968902,0.016641155,0.018270893,0.009988513,-0.016131863,-0.008358775,-0.0071173725,0.0065762484,-0.020893754,-0.020626375,-0.014782235,0.011955658,-0.000496163,-0.01040868,-0.014298406,0.006334334,0.0021135667,-0.013050638,0.0009246855,0.009956682,0.0005848914,-0.002810662,-0.00884897,0.015100543,-0.025388267,-0.014489392,-0.010262258,-0.03032841,0.0073083574,0.013598128,0.0046441173,0.0011952475,0.031499784,0.00033780464,-0.0012541346,0.004484963,0.014196549,-0.008282381,-0.004319443,0.0035618693,0.007683961,0.0036096156,0.006716304,-0.008186888,-0.014247477,0.0030016468,0.020333532,0.026432317,0.0043671895,-0.0039151916,-0.003708291,-0.008874434,0.011847434,0.021886876,-0.00579321,0.0012342402,-0.0011299943,0.0211484,0.0042239507,0.009931218,-0.0032658428,-0.018665597,0.025770236,0.020715501,-0.023211038,-0.01814357,-0.018551005,-0.016641155,-0.012808724,-0.02196327,0.009619275,-0.010879776,0.0042303167,0.028418561,0.01568623,-0.010033077,-0.000105340136,-0.006869092,0.0019989759,-0.01802898,0.009536515,-0.019786041,0.00918001,0.02627953,0.015864484,-0.024547933,0.009969414,0.00740385,-0.009803894,-0.015151473,0.012592275,-0.011115325,0.02742544,-0.0020180743,0.011643716,0.009657472,-0.045963712,-0.0032180964,-0.00770306,-0.011153521,-0.014705841,-0.024687989,0.026304994,0.021683158,0.00035988726,0.010988001,0.014909559,0.015011418,0.01967145,0.0076393983,0.02229431,0.008148692,0.0027342679,0.029819118,0.013980099,-0.016080933,-0.024815312,0.012770527,0.00007002782,0.022943659,0.007314724,-0.011860166,-0.012235769,0.02332563,0.00901449,-0.008467,0.016246453,0.038986396,-0.0029777738,-0.0063025034,-0.027909268,0.010262258,-0.013432608,-0.011083493,-0.03114328,0.00090319966,-0.0052361707,0.018270893,0.012464952,-0.0080659315,-0.038884535,-0.012999709,-0.000011209176,-0.0096129095,-0.021555835,0.030583058,-0.0010273398,-0.0021660877,0.020626375,-0.008804406,0.018767456,-0.017901657,0.025210014,0.009663839,0.03290034,0.00964474,-0.6710447,-0.013343482,0.008027734,-0.02333836,-0.011732842,0.020740965,0.008479732,0.007938608,0.00926277,0.025477393,-0.021886876,0.0100076115,-0.00871528,0.008626154,-0.025120888,-0.019938828,0.02021894,-0.0036828264,0.015864484,0.010370483,-0.008307845,0.0018509625,-0.005672253,-0.0055290144,-0.0072637945,0.0075693703,0.01557164,-0.019085763,-0.016666621,0.012401289,-0.009052686,0.023198307,0.0073529207,-0.021084739,0.032594766,0.0014912742,-0.0009350305,0.0270944,0.013610861,0.01879292,-0.01814357,-0.028214844,-0.005175692,0.0043512736,-0.0035300385,0.030353876,0.0002681747,0.01907303,0.0015374288,0.0137763815,-0.0015939286,-0.015126009,0.0037242065,-0.007206499,0.022867264,-0.0048351022,0.0013170004,0.0004519977,0.01497322,0.011261746,-0.0075566377,0.016870337,-0.011732842,-0.029335288,-0.008116861,0.015227867,-0.010586932,-0.016042735,0.0058855196,-0.021683158,0.016246453,0.018678328,0.030277481,-0.0036318973,0.008906265,0.03404625,0.03809513,-0.0059555476,-0.031015957,-0.0038292482,0.028494954,0.014744039,0.014947755,-0.03190722,0.007257428,-0.0089380955,-0.010567834,0.011758307,0.008925363,-0.0065507838,0.021352118,-0.0018477794,-0.0017634277,-0.006824529,-0.018563738,0.00256079,0.010784283,-0.010835213,-0.0008427211,-0.0139037045,-0.016055468,0.0044754143,0.026865216,0.03715294,0.02508269,0.0052998327,-0.022103325,0.024878973,0.014871362,-0.006162448,0.00308759,-0.0061942786,-0.01645017,-0.018270893,-0.016373776,-0.030684916,0.030761309,0.025923025,0.010536003,0.012770527,0.021619497,0.015126009,0.010606031,-0.009033589,0.007365653,0.025910292,0.018500077,0.009822993,0.008205987,0.0050356365,0.030201087,0.0043512736,0.017672474,-0.017608812,-0.0018254978,0.017850727,0.02501903,0.0072701606,0.010841579,-0.0020212575,-0.010020344,-0.0014729714,-0.016666621,-0.024764381,-0.013980099,-0.031245138,0.0045772726,0.004176204,-0.023974977,0.00778582,-0.0057995766,-0.00939646,0.0037560374,0.033969857,0.009663839,-0.020906486,-0.0007555842,-0.011681913,-0.017723404,-0.00073250686,-0.008002269,0.005697718,-0.015851751,-0.015202402,0.002078553,-0.015673498,0.022052396,0.02317284,0.0031146463,-0.03394439,0.01180287,-0.009358263,-0.029360753,-0.012082981,-0.01568623,0.0052361707,-0.028393097,-0.014081957,0.013738184,-0.019786041,-0.0058855196,0.009530149,-0.031601645,0.008957194,0.012445853,0.012280333,0.008409704,0.012343994,-0.021301188,-0.0019321311,0.0012891485,-0.010224061,0.0096702045,0.007843115,-0.0026324093,-0.00035113379,-0.0008299888,-0.0029952808,-0.016679352,0.009415559,0.009027222,0.0058505055,0.007244696,-0.003705108,0.027603691,-0.049579695,0.0010663327,-0.02785834,0.007817651,0.006280222,0.0036764604,-0.03628714,0.01769794,0.0067226705,-0.0005391346,0.023020053,-0.010402313,0.032594766,-0.021021077,0.008473366,0.027323581,0.0027088032,0.016373776,0.0024430158,-0.010122202,0.02065184,0.012802358,0.019824238,0.016093666,-0.029819118,0.030506663,-0.0019098496,0.0135090025,0.013687255,0.008817139,0.012560444,0.022638083,-0.021695891,0.012846922,-0.0008411296,-0.011955658,0.01442573,0.042907953,-0.014451195,0.024242356,0.011096226,0.03913918,0.00048382854,-0.0042239507,0.012783259,0.007047345,0.0055099158,0.003437729,-0.0029570838,0.029309824,-0.018321823,-0.0078685805,0.01726504,0.008040466,0.018207232,0.0153806545,0.007887678,0.028724138,0.0037687698,0.012929682,0.012751428,-0.0013774789,0.0052266214,-0.0070218802,-0.03481019,0.002858408,0.019009368,-0.005860055,-0.00469823,-0.021695891,0.005825041,-0.02317284,-0.023733063,-0.0032817582,0.0089380955,-0.017621545,-0.012394924,0.0054144235,0.049579695,0.003119421,0.00863252,-0.023593009,-0.003580968,0.004628202,0.003708291,0.026406853,0.02458613,0.015495246,-0.0074929763,0.01754515,-0.01073972,0.03491205,-0.024777114,-0.002081736,-0.0055449298,0.0011673955,0.0030700832,0.0030048299,-0.011618251,0.03677097,-0.013114301,-0.017468758,-0.009358263,0.019620521,-0.021568567,-0.0058727874,0.0007862214,-0.02332563,0.011433632,0.023351094,0.0010910016,-0.014349336,-0.011064395,-0.0021804115,0.005513099,-0.013789114,-0.03710201,-0.036669113,0.023733063,0.056327827,0.017392363,-0.010122202,0.042424124,-0.011471829,-0.013585396,-0.021326654,-0.0016082524,0.0011753532,-0.0035300385,-0.013674523,0.01062513,-0.0030493932,0.0034504614,0.02272721,-0.019862436,-0.0010846354,-0.030532127,-0.024013175,-0.006588981,-0.024980832,-0.028545884,0.0025735223,-0.002505086,0.04278063,0.011363605,0.010281357,-0.0018414132,0.0071810344,-0.013840043,-0.007397484,0.01518967,0.0034759261,-0.01166918,-0.0110898595,0.057448275,0.022969123,0.022485295,0.005513099,-0.002002159,0.019951561,0.031270605,-0.0030509846,-0.00893173,0.022689013,-0.02524821,0.014909559,-0.00075279904,0.033078592,-0.015622569,0.010001245,0.0005697718,0.0043353583,-0.0055226483,-0.011013466,-0.013432608,0.024076836,-0.0052966494,-0.016080933,-0.022930928,-0.027068933,-0.0038642623,0.012751428,-0.0101476675,-0.0069263875,-0.00435764,-0.011541857,0.0062420247,-0.018449146,0.006709938,0.0004949693,-0.0049146796,-0.011732842,0.024076836,0.004675948,0.01836002,0.034122646,-0.025961222,0.014438462,-0.0017331884,-0.031168744,-0.0270944,0.01032592,-0.0024923536,-0.005436705,0.022930928,-0.02377126,0.000482237,0.007779454,0.020333532,-0.011516392,0.012012954,0.0046823146,0.0033231382,0.012293065,0.007798552,-0.0030064215,0.009434656,-0.0056849853,-0.009059053,0.0045231604,-0.019480465,0.011083493,-0.007060077,0.021810481,0.018869312,0.0003507359,0.007747623,-0.004819187,-0.003886544,-0.004545442,-0.01540612,-0.0008081051,-0.010733354,-0.018041711,-0.00060916244,0.008842603,0.018118106,0.0038769946,-0.020027956,-0.0046727653,-0.024165962,0.01836002,0.016539296,-0.006407545,0.023542078,0.0035364048,-0.020206207,-0.010676059,0.008059565,-0.002796338,0.02694161,-0.0008562492,-0.022879997,-0.026330458,-0.008753477,-0.0002546466,0.012993343,-0.016017271,-0.004752342,-0.029819118,-0.017787065,-0.0015183304,-0.03175443,0.005210706,-0.029971905,-0.013585396,-0.02818938,-0.008053198,0.07257428,-0.024547933,0.010663327,-0.029513542,-0.01655203,-0.013674523,0.00262286,-0.01771067,-0.0017793431,0.025502857,0.020231673,0.009893021,0.011446365,0.02229431,-0.002817028,0.020333532,0.0131015675,0.0047014127,0.00010752851,-0.031066885,0.0059555476,0.029360753,0.02617767,0.017825263,-0.0049178624,-0.011739208,0.005567211,0.000097382435,0.002355481,-0.005283917,-0.01928948,0.0039915857,0.00041340286,-0.014514856,0.0055640284,-0.02442061,0.017901657,0.014412998,0.0016209848,0.0052489033,-0.010994367,0.002345932,-0.018512808,0.010510539,0.017608812,0.003663728,-0.0071046404,-0.008135959,-0.02704347,-0.022332508,0.016233722,-0.0032849412,0.01273233,-0.01371272,-0.004548625,-0.012394924,0.009052686,0.0019544128,0.0031417024,0.013139765,-0.020333532,0.003222871,-0.0043703723,-0.023452953,-0.035675988,-0.020626375,0.0015453866,-0.00066804944,0.035217624,-0.0347338,-0.028825996,-0.0040647965,-0.015635302,0.010803382,0.032849412,0.026483247,0.013916437,0.00077826367,-0.027552763,-0.0021835947,0.02054998,0.00876621,0.02147944,0.04469048,-0.017277772,-0.011809236,0.03391893,0.013165229,-0.013649058,-0.014171083,0.00876621,0.03175443,0.011471829,-0.016030004,0.014884094,-0.022803603,0.002396861,0.010599665,-0.0116246175,-0.0072001326,-0.0013313242,-0.005423973,0.018334556,-0.021441244,-0.0046059205,-0.0010910016,-0.008645252,-0.018589202,0.0050292704,0.012687767,-0.005614958,-0.008314212,0.012445853,0.007174668,0.010319553,-0.0065762484,0.02119933,-0.009523783,-0.00808503,0.02475165,0.026686965,-0.019989759,-0.025528323,-0.0063375174,-0.010892509,0.015278797,0.028673207,-0.018665597,-0.019467734,-0.011490928,-0.024497004,0.011166254,-0.00016213827,-0.0052998327,-0.018398218,-0.0060001104,-0.003705108,0.008365141,0.013687255,-0.007964073,-0.029335288,-0.023312896,0.0065571503,0.023924049,0.003181491,0.022370704,-0.00389291,0.010746087,0.033791605,-0.023249235,0.02503176,-0.0031798994,0.007161936,-0.048892148,-0.021517638,-0.021925073,-0.02846949,0.0034058983,-0.013738184,-0.016819408,-0.008594323,0.006665375,0.015737161,0.008078664,-0.0020308066,-0.00042653305,0.0079258755,0.016411973,-0.0062420247,-0.020409925,0.0030589423,-0.019098496,-0.012866019,-0.005780478,0.0059905616,0.0018636949,-0.013343482,0.019633254,0.019747844,-0.036261678,-0.034784727,-0.0019751028,0.011140789,-0.01409469,0.0017745686,0.003816516,-0.0122294035,-0.029360753,0.0672267,-0.005732732,-0.002355481,-0.0040011345,0.015367922,0.0065157698,0.032823946,-0.0067608673,-0.023312896,-0.03338417,-0.024407877,-0.03437729,-0.0018652864,0.008899899,0.02415323,0.011541857,-0.017748868,-0.03310406,-0.012961512,-0.03577785,-0.015482513,-0.013521735,0.020142546,0.00939646,-0.0009517417,-0.016220989,-0.012942414,0.011898363,0.041863903,-0.026483247,-0.0143111395,0.020499052,0.007601201,0.026101276,0.011930194,-0.023427488,-0.014756771,0.000092657545,-0.012235769,-0.018512808,0.003628714,-0.018449146,0.00536986,0.001790484,-0.010383216,-0.016539296,0.031015957,0.0064871223,-0.01221667,-0.0025448746,0.016411973,-0.0011116916,0.0022997772,0.022829069,0.006359799,-0.0057963934,0.01611913,-0.0035905172,-0.007327456,0.0017124984,-0.013018807,0.023402022,0.015367922,-0.010453243,0.025859363,-0.027960198,0.015864484,-0.007365653,0.022281578,-0.012757795,-0.0030414353,-0.011401801,-0.033154987,0.0049592424,-0.011739208,0.019264016,-0.039368365,0.008186888,-0.01786346,-0.023452953,-0.0003535211,-0.007817651,0.017914388,-0.008225085,-0.031397928,-0.0064743897,-0.015711695,0.0043735555,-0.013890972,-0.033154987,-0.007709426,0.01781253,0.028571349,-0.009409192,-0.011000733,0.031652573,0.011026198,0.012197573,0.016921267,0.19241098,-0.0149859525,-0.002043539,0.021390315,-0.017137716,0.00923094,0.025986686,0.0058123088,0.023109179,-0.0048351022,-0.03519216,-0.0061815465,-0.008129593,0.00028011127,0.0173669,-0.02054998,-0.029691795,-0.0015183304,-0.011707378,-0.013088835,-0.017901657,0.017634278,-0.00026698105,-0.03519216,0.030353876,0.036898293,0.0048860316,-0.004434034,0.009759331,0.022026932,0.0002727504,-0.021886876,0.01497322,-0.011465464,-0.0034186307,0.0025003112,0.0121593755,-0.012617739,0.017150449,0.011605519,-0.0035746016,-0.015622569,-0.013534467,-0.042322267,0.014323872,-0.0027597325,0.008129593,0.0022090592,0.017150449,0.024216892,-0.0002695673,-0.026037615,0.015558908,0.020346263,-0.0015310628,0.020511784,0.00816779,0.008097762,-0.012426754,0.013967366,-0.0059969276,0.039088253,-0.016080933,0.03481019,-0.025210014,-0.00035968833,0.0025273676,-0.0076139336,0.038757212,-0.028825996,-0.010039442,-0.002310918,-0.011866531,0.010886142,-0.027680086,-0.035803314,0.010332286,0.036414463,-0.012000221,0.0053412127,-0.036134355,-0.031958148,0.0020499052,-0.009307333,0.006178363,-0.0224089,0.022205183,-0.0077221585,-0.009109982,-0.027399974,-0.01874199,-0.00007186804,-0.008982659,-0.008607055,0.00685636,0.02818938,0.0018334555,0.011306309,-0.02770555,0.02305825,-0.0131015675,0.038604423,0.023796726,0.002164496,-0.023351094,-0.0153933875,0.0037273897,0.0203208,0.010402313,0.01032592,0.0038706283,-0.02191234,-0.007161936,-0.0081932545,0.007168302,0.025057226,0.002345932,-0.0074929763,0.007333822,0.013305285,0.025872095,-0.027018005,0.005665887,0.0071810344,0.015622569,-0.010726988,-0.014412998,0.006665375,0.00034397186,-0.031397928,0.035752382,-0.0045167943,-0.014463927,-0.0044531324,-0.017417828,-0.010478708,-0.026890682,-0.0023682134,-0.013623593,0.0110898595,0.004519977,0.0051438613,0.007244696,-0.00008524693,-0.0037178404,-0.025439195,-0.0017857093,-0.0112171825,-0.006824529,0.009218207,-0.024382412,0.0047618914,0.0047141453,-0.009568346,0.024955368,0.0005980216,-0.019926097,-0.03694922,0.011268112,-0.010822481,-0.019060299,-0.0052616354,0.018169036,-0.0005908597,-0.0325693,0.008645252,-0.16114037,0.033587888,0.014222013,-0.0116946455,-0.025897559,0.011013466,-0.016208256,0.0070282463,-0.01802898,0.00033303,0.021224795,-0.025833897,-0.02256169,-0.021594033,-0.001908258,-0.00923094,-0.0042685135,0.0005538564,0.046931367,0.013687255,0.020040687,-0.023580275,0.01611913,0.0015326543,-0.0035937002,0.000322685,0.010306821,0.037687697,-0.015533443,-0.004125275,0.010262258,-0.007168302,0.03376614,0.017290505,0.013228891,-0.005086566,0.0076584965,0.016819408,0.0017713854,0.023211038,0.01103893,-0.001793667,0.0008467,0.019416803,0.024127766,-0.0005303811,0.024764381,0.002608536,0.0048669335,-0.016653888,0.019493198,-0.026967075,0.0006218948,-0.0042335,0.011070761,0.025528323,-0.0043098936,0.0028090703,-0.008696182,-0.006464841,-0.007919509,-0.033893462,-0.011280845,-0.010854311,0.012324896,-0.030099228,-0.02016801,0.010746087,-0.013152497,-0.002917295,0.011904729,-0.020957416,0.0071173725,-0.008728012,0.0041825706,-0.006588981,-0.035701454,0.023847654,-0.013470805,-0.008562492,-0.0165011,0.026737893,-0.014209281,0.007410216,-0.020791896,0.0079959035,-0.0052138893,0.011344506,-0.01633558,-0.022523493,-0.0010886142,-0.023643937,-0.01955686,0.0005960322,0.033129524,-0.008880801,0.027832873,0.0021851861,0.0020339896,-0.02206513,0.012916949,0.0027517749,-0.016462903,0.012738696,0.042653307,-0.016080933,0.00064457423,0.018614667,0.015762625,0.004271697,-0.011108958,0.019595057,0.010676059,0.024662524,-0.013992831,0.027603691,-0.030786775,-0.031474322,0.009421924,-0.0056818025,0.028342167,0.0114209,0.0015055981,0.02224338,-0.016424706,0.003160801,-0.08749657,-0.031550713,0.007970438,0.001207184,-0.018067177,0.006394813,0.00083237607,0.024344215,-0.018512808,0.0296154,-0.0026387754,-0.0067736,-0.020333532,0.0073783854,0.011064395,-0.0074611455,-0.030863168,0.016755747,0.0029188867,0.03234012,-0.011681913,-0.023376558,-0.0044626817,0.0019862435,0.0043035275,0.00041897324,-0.0029936892,0.022192452,0.023618473,-0.00685636,-0.00909725,-0.028927853,0.015724428,-0.005560845,-0.010720622,0.020511784,-0.032110937,-0.016017271,0.020842824,-0.023809457,-0.0033454197,-0.007480244,0.013063371,-0.020231673,-0.006321602,0.0057009007,-0.0064489255,0.026330458,-0.010001245,-0.025859363,-0.0023857204,-0.00061433495,-0.017914388,-0.0203208,0.015176938,-0.0012063882,0.0132416235,0.0075439056,-0.0101604,-0.00854976,-0.015266064,-0.017417828,-0.014591251,0.032110937,0.0033263213,0.011701011,-0.02742544,-0.01073972,0.024140498,-0.007944974,-0.0037146574,0.008868068,-0.03262023,0.006977317,-0.01764701,-0.02332563,-0.011592787,-0.0055640284,0.013139765,-0.024649791,0.0011140789,-0.0014212463,-0.019518662,-0.013356214,0.0151132755,0.007709426,0.018258162,-0.0023363826,-0.01502415,-0.03710201,0.00876621,0.023911316,0.021492174,-0.010854311,-0.009332798,-0.029335288,-0.0071937665,0.014285674,0.0041953027,-0.0061528985,-0.0066526425,0.010485074,-0.051998835,0.0116246175,0.00017516901,-0.024356948,0.022192452,0.008460633,0.010504172,-0.0186274,-0.00808503,0.006945486,0.008619787,0.019709647,-0.017723404,-0.0074229487,-0.020257138,-0.015622569,0.043901075,0.007327456,0.017341433,0.0042207674,-0.008053198,0.0029984638,0.024306018,-0.0027772395,-0.018385485,0.008562492,-0.024344215,0.015940877,-0.01847461,0.005630873,0.024000442,-0.007047345,0.020193476,0.0133689465,-0.009956682,-0.0022536225,0.009008124,0.028622279,-0.0020132996,0.0036860097,-0.006006477,-0.012000221,0.0034791091,-0.020397194,0.0014666052,-0.002310918,-0.020588178,0.0025973953,0.011605519,-0.013941902,-0.0013018808,0.037662234,0.002584663,-0.01895844,-0.004322626,-0.03290034,0.018716525,-0.0049274117,0.0048382855,-0.010924339,0.048561107,0.008034101,0.02415323,-0.021899607,-0.004717328,-0.005322114,0.0029586751,0.020575445,0.026585106,-0.022587154,-0.010001245,-0.03323138,-0.0035364048,0.004583639,0.033460565,0.0067545013,0.005197974,0.027654622,-0.013699987,0.027883803,0.03672004,0.022599885,-0.02928436,0.011446365,0.02661057,0.004650484,-0.020893754,0.004313077,0.0031894487,0.018831117,-0.036974687,0.020931952,0.007753989,-0.023783993,-0.0030271115,-0.0018414132,-0.028367631,-0.007257428,0.007862214,0.020842824,-0.0050356365,-0.0067736,-0.0018477794,-0.02349115,-0.0270944,0.006353433,-0.03223826,-0.031830825,-0.0021772285,0.050521888,-0.003084407,-0.00994395,0.014285674,0.013750916,-0.021224795,0.008664351,0.0078112846,-0.021033809,-0.030226551,0.019353142,0.0036541787,-0.026839752,0.023631206,-0.012070249,0.026432317,0.008244184,0.020308066,-0.00770306,0.010281357,-0.016997661,0.009899387,-0.020791896,0.007333822,-0.0046886806,-0.023618473,0.0133689465,-0.019849703,-0.0069200215,-0.01150366,0.078329295,0.010663327,0.00693912,0.0048860316,0.0051056645,0.031805363,0.008180522,-0.0006863522,0.0025098606,0.006869092,0.041889366,-0.023402022,0.011955658,-0.024649791,-0.022307042,-0.0114845615,-0.030965026,0.023261968,-0.021161133,-0.021161133,-0.008734379,-0.012872386,0.036796436,-0.020753698,-0.04048881,-0.01955686,0.0016536114,-0.011376337,0.003931107,-0.0334351,-0.008976293,0.0013002892,-0.0059555476,-0.006792698,-0.0054207896,0.020129815,-0.022459831,0.016539296,0.0060574063,0.016131863,0.009803894,0.0030684916,-0.01349627,-0.020715501,-0.010434144,-0.009822993,-0.016934,-0.0046536666,-0.017417828]

const sleep = (ms) => new Promise(r => setTimeout(r, ms));

let options = {
  method: 'POST',
  headers: {
    'Api-Key': process.env.PLASMO_PUBLIC_PINECONE_API_KEY,
    'Accept': 'application/json',
    'Content-Type': 'application/json',
  },
};

async function upsertEmbeddings(embeddings, chunks, queryId) {
    const vectors = embeddings.map((embedding, i) => ({
      id: uuidv4(),
      values: Array.from(embedding),
      metadata: {"data": chunks[i], "queryId": queryId},
    }));
    const ids = vectors.map(vector => vector.id);
    let payload = {}
    payload["vectors"] = vectors
    options["body"] = JSON.stringify(payload)
    fetch(url + "vectors/upsert", options)
        .then(response => response.json())
        .then(data => console.log(data))
        .catch(err => console.error('Error:', err));
    return ids
    }

async function deleteEmbeddings(ids) {
    // await pinecone.init({      
    //     environment: "gcp-starter",      
    //     apiKey: "43a407b0-d1c3-4baf-a897-da262afea5cf",      
    // });
    let payload = {}
    payload["ids"] = ids
    options["body"] = JSON.stringify(payload)
    
    fetch(url + "vectors/delete", options)
        .then(response => response.json())
        .then(data => console.log("data", data))
        .catch(err => console.error('Error:', err));
}

async function queryEmbeddings(query, queryId) {
    let payload = {}
    payload["vector"] = query
    payload["includeMetadata"] = true
    payload["topK"] = 10
    // payload["filter"] = {
    //     "queryId": {"$eq": queryId},
    // }
    options["body"] = JSON.stringify(payload)
    
    try {
        const response = await fetch(url + "query", options);
        const data = await response.json();
        return data;
    } catch (err) {
        console.error('Error:', err);
    }
}

const handler: PlasmoMessaging.MessageHandler = async (req, res) => {
    const CHUNK_SIZE = 8000; // 30,000 characters
    const inputPrompt = req.body.prompt;
    console.log(req.body)
    console.log(inputPrompt)
    const splitIntoChunks = (content, size) => {
        let chunks = [];
        for (let i = 0; i < content.length; i += size) {
          chunks.push(content.slice(i, i + size));
        }
        return chunks;
      };
      
      let contentChunks = splitIntoChunks(inputPrompt, CHUNK_SIZE);
      console.log(contentChunks);
      let embeddings = []
      const response = await client.embeddings.create({
        model: "text-embedding-ada-002",
        input: contentChunks,
        });
      // Create a function to summarize a single chunk
        embeddings = embeddings.concat(response.data.map(record => record['embedding']));
        // const indexName = "vnextpm"
        let queryId = uuidv4()
        let _, ids = await upsertEmbeddings(embeddings, contentChunks, queryId)
        // let queryResponse = await client.embeddings.create({
        //     model: "text-embedding-ada-002",
        //     input: query,
        // });
        // console.log(queryResponse.data[0].embedding)
        // console.log(JSON.stringify(queryResponse.data[0].embedding))
        await sleep(20000)
        let queryresult = await queryEmbeddings(queryVector, queryId)
        console.log("Query result: ", queryresult)
        contentChunks = queryresult.matches.map(match => match.metadata.data);
        console.log("cc", contentChunks)
        await sleep(5000)
        let deleteResponse = await deleteEmbeddings(ids)
        const summarizeChunk = async (chunk) => {
        let message
        try{
                message = await client.chat.completions.create({
                    model: 'gpt-4-0613',
                    messages: [
                    {
                        role: 'system',
                        content:
                        'You are an assistant that takes an html webpage and finds the user details from it. Your only job is to find the user details from the given html and you should NOT use any outside sources to get the required information. DO NOT USE JOHN DOE OR ANY OTHER PLACEHOLDER NOT PRESENT IN THE HTML in any user detail fields.',
                    },
                    {
                        role: 'user',
                        content: `HTML of the webpage is ${chunk}`,
                    },
                    ],
                    functions: [
                    {
                        name: 'findUserDetails',
                        description:
                        'Select this function if you find user details like name (first, middle, last, prefix, suffix), address (shipping and billing), gender, display name, email from the html of the given webpage. DO NOT select this function if the html did not have any user details. DO NOT USE JOHN DOE OR ANY OTHER PLACEHOLDER NOT PRESENT IN THE HTML in any user detail fields.',
                        parameters: {
                        type: 'object',
                        properties: {
                            user_details: {
                            type: 'array',
                            description:
                                'An array of relevant user details extracted from the webpage html. Only select user details that can be found from the html webpage.',
                            items: {
                                type: 'object',
                                properties: {
                                label: {
                                    type: 'string',
                                    description: 'Label of what user detail it is. For example first_name, email, etc. Make it as specific as possible'
                                },
                                value: {
                                    type: 'string',
                                    description: 'Value from the given html webpage corresponding to the label mentioned.'
                                }
                                }
                            },
                            },
                            // "required": ["user_details"]
                        },
                        },
                    },
                    {
                        name: 'errorWhenFindingUserDetails',
                        description:
                        'Select this function when no user details can be inferred from the html',
                        parameters: {
                        type: 'object',
                        properties: {
                            message: {
                            type: 'string',
                            description:
                                'Message for the user that no user details were found in the html',
                            },
                        },
                        },
                    },
                    ],
                    // function_call: { name: 'findUserDetails' },
                    function_call: 'auto',
            });
        }
        catch (error) {
            console.log(error)
            return ""
        }
        console.log(message)
        if (message.choices[0].finish_reason == "function_call" && message.choices[0].message.function_call.name == 'findUserDetails') {
            return message.choices[0].message.function_call.arguments;
        }
        return "";
      };
      
    // Use Promise.all to process all chunks in parallel
    const summarizedChunks = await Promise.all(contentChunks.map(chunk => summarizeChunk(chunk)));
    console.log(summarizedChunks)
    let mergedData = {};

    summarizedChunks.forEach(item => {
        if (item.length > 1) {
            item = JSON.parse(item)
            console.log(item)
            item?.user_details?.forEach(detail => {
                let label = detail.label;
                const originalLabel = label;
                const value = detail.value;

                // If the label and value combination is already in the mergedData, continue to next iteration
                if (mergedData[label] === value) {
                    return;
                }
                
                let suffix = 1;
                while (mergedData[label] && mergedData[label] !== value) {
                    label = originalLabel + suffix;
                    suffix++;
                }
                
                mergedData[label] = value;
            });
        } 
    });
    res.send(mergedData)
    // Now, get a conjoined summary of all the chunks
    // const combinedMessage = await client.chat.completions.create({
    //   messages: [
    //     {role: 'system', content: 'You are an assistant. Provide a unified summary from the following content'},
    //     {role: 'user', content: summarizedChunks.join(" ")}
    //   ],
    //   model: 'gpt-3.5-turbo-16k',
    // });
    // console.log(combinedMessage)
    // res.send({
    //   message: combinedMessage
    // });
  }
 
export default handler